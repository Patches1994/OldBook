{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\UserX\\\\desktop\\\\aplikacje.internetowe\\\\src\\\\puzzle\\\\helpers\\\\usePuzzle.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useRef, useEffect } from \"react\";\n\nconst usePuzzle = () => {\n  _s();\n\n  const [table, setTable] = useState([]);\n  const [numbers, setNumbers] = useState([]);\n  const ref = useRef(null);\n\n  const changePosition = e => {\n    if (ref.current.offsetLeft - 125 === e.target.offsetLeft && ref.current.offsetTop === e.target.offsetTop || ref.current.offsetLeft + 125 === e.target.offsetLeft && ref.current.offsetTop === e.target.offsetTop) {\n      let leftSquare = ref.current.offsetLeft;\n      let leftImage = e.target.offsetLeft;\n      e.target.style.left = `${leftSquare}px`;\n      return ref.current.style.left = `${leftImage}px`;\n    }\n\n    if (ref.current.offsetTop + 125 === e.target.offsetTop && ref.current.offsetLeft === e.target.offsetLeft || ref.current.offsetTop - 125 === e.target.offsetTop && ref.current.offsetLeft === e.target.offsetLeft) {\n      let topSquare = ref.current.offsetTop;\n      let topImage = e.target.offsetTop;\n      e.target.style.top = `${topSquare}px`;\n      return ref.current.style.top = `${topImage}px`;\n    }\n  };\n\n  useEffect(() => {\n    generateImages();\n  }, []);\n\n  const shuffle = array => {\n    var currentIndex = array.length,\n        temporaryValue,\n        randomIndex;\n\n    while (0 !== currentIndex) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array.map((n, index) => {\n      return /*#__PURE__*/_jsxDEV(\"img\", {\n        alt: table[index],\n        src: table[index],\n        onClick: changePosition,\n        style: {\n          top: n[0] * 125,\n          left: n[1] * 125\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 16\n      }, this);\n    });\n  };\n\n  const generateImages = () => {\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (i === 3 && j === 3) {\n          return;\n        }\n\n        setNumbers(numbers => [...numbers, [i, j]]);\n        setTable(table => [...table, `piece_${i}_${j}.png`]);\n      }\n    }\n  };\n\n  return {\n    shuffle,\n    numbers,\n    ref\n  };\n};\n\n_s(usePuzzle, \"krfWZEkj3B3K5+8WFD0kpqNxFIA=\");\n\nexport default usePuzzle;","map":{"version":3,"sources":["C:/Users/UserX/desktop/aplikacje.internetowe/src/puzzle/helpers/usePuzzle.js"],"names":["useState","useRef","useEffect","usePuzzle","table","setTable","numbers","setNumbers","ref","changePosition","e","current","offsetLeft","target","offsetTop","leftSquare","leftImage","style","left","topSquare","topImage","top","generateImages","shuffle","array","currentIndex","length","temporaryValue","randomIndex","Math","floor","random","map","n","index","i","j"],"mappings":"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","sourcesContent":["import { useState, useRef, useEffect } from \"react\";\r\n\r\nconst usePuzzle = () => {\r\n    const [table, setTable] = useState([]);\r\n    const [numbers, setNumbers] = useState([]);\r\n    const ref = useRef(null);\r\n  \r\n    const changePosition = (e) => {\r\n      if((ref.current.offsetLeft - 125 === e.target.offsetLeft && ref.current.offsetTop === e.target.offsetTop) || (ref.current.offsetLeft + 125 === e.target.offsetLeft && ref.current.offsetTop === e.target.offsetTop)){\r\n        let leftSquare = ref.current.offsetLeft;\r\n        let leftImage = e.target.offsetLeft;\r\n        e.target.style.left = `${leftSquare}px`;\r\n        return ref.current.style.left = `${leftImage}px`;\r\n      }\r\n      if((ref.current.offsetTop + 125 === e.target.offsetTop && ref.current.offsetLeft === e.target.offsetLeft) || (ref.current.offsetTop - 125 === e.target.offsetTop && ref.current.offsetLeft === e.target.offsetLeft)){\r\n        let topSquare = ref.current.offsetTop;\r\n        let topImage = e.target.offsetTop;\r\n        e.target.style.top = `${topSquare}px`;\r\n        return ref.current.style.top = `${topImage}px`;\r\n      }\r\n    }\r\n  \r\n    useEffect(() => {\r\n      generateImages();\r\n    }, []);\r\n  \r\n    const shuffle = (array) => {\r\n      var currentIndex = array.length, temporaryValue, randomIndex;\r\n      while (0 !== currentIndex) {\r\n        randomIndex = Math.floor(Math.random() * currentIndex);\r\n        currentIndex -= 1;\r\n        temporaryValue = array[currentIndex];\r\n        array[currentIndex] = array[randomIndex];\r\n        array[randomIndex] = temporaryValue;\r\n      }\r\n      return array.map((n, index) => {\r\n        return <img alt={table[index]} src={table[index]} onClick={changePosition} style={{top: n[0]*125, left: n[1]*125}}/>\r\n      })\r\n    }\r\n  \r\n    const generateImages = () => {\r\n      for(let i = 0; i < 4; i++){\r\n        for(let j = 0; j < 4; j++){\r\n          if(i === 3 && j === 3){\r\n            return\r\n          }\r\n          setNumbers(numbers => [...numbers, [i, j]])\r\n          setTable(table => [...table, `piece_${i}_${j}.png`])\r\n        }\r\n      }\r\n    }\r\n\r\n    return { shuffle, numbers, ref };\r\n};\r\n\r\nexport default usePuzzle;\r\n"]},"metadata":{},"sourceType":"module"}