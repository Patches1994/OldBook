{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\n\nconst useMemory = () => {\n  _s();\n\n  let [tiles, setTiles] = useState([]);\n  let [tilesAmount, setTilesAmount] = useState(12);\n  let [score, setScore] = useState(0);\n  let [level, setLevel] = useState('easy');\n  let [firstTile, setFirstTile] = useState('');\n  const [disabled, setDisabled] = useState(false);\n\n  const showTile = e => {\n    const target = e.target.style;\n    target.backgroundColor = `rgb(${230 - e.target.id * 3}, ${230 - e.target.id * 3}, ${230 - e.target.id * 3})`;\n    target.borderColor = 'magenta';\n    target.color = \"black\";\n    setTimeout(() => {\n      target.borderColor = 'rgb(20, 100, 0)';\n      target.backgroundColor = 'rgb(20, 100, 0)';\n      target.color = \"rgb(20, 100, 0)\";\n    }, 1500);\n\n    if (!firstTile) {\n      return setFirstTile(e.target);\n    }\n\n    setDisabled(true);\n    setTimeout(() => {\n      setDisabled(false);\n    }, 1500);\n\n    if (firstTile.id === e.target.id && (firstTile.offsetLeft !== e.target.offsetLeft || firstTile.offsetTop !== e.target.offsetTop)) {\n      setTimeout(() => {\n        setScore(score + 1);\n        firstTile.style.opacity = \"0\";\n        e.target.style.opacity = \"0\";\n        setFirstTile('');\n      }, 500);\n    } else {\n      setFirstTile('');\n    }\n  };\n\n  useEffect(() => {\n    let numbers = [];\n\n    for (let i = 0; i < tilesAmount / 2; i++) {\n      numbers.push(i);\n    }\n\n    let cloneNumbers = [...numbers];\n    let allNumbers = numbers.concat(cloneNumbers);\n    const shuffle = [...allNumbers].sort(() => Math.random() - 0.5);\n    setTiles(shuffle);\n  }, [tilesAmount]);\n  return {\n    setLevel,\n    setScore,\n    setTilesAmount,\n    tilesAmount,\n    score,\n    disabled,\n    showTile,\n    level,\n    tiles\n  };\n};\n\n_s(useMemory, \"pSeaZ8szANDy2MdODAKnqHHPaGI=\");\n\nexport default useMemory;","map":{"version":3,"sources":["C:/Users/UserX/desktop/aplikacje.internetowe/src/memory/helpers/useMemory.js"],"names":["useState","useEffect","useMemory","tiles","setTiles","tilesAmount","setTilesAmount","score","setScore","level","setLevel","firstTile","setFirstTile","disabled","setDisabled","showTile","e","target","style","backgroundColor","id","borderColor","color","setTimeout","offsetLeft","offsetTop","opacity","numbers","i","push","cloneNumbers","allNumbers","concat","shuffle","sort","Math","random"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nconst useMemory = () => {\r\n    let [tiles, setTiles] = useState([]);\r\n    let [tilesAmount, setTilesAmount] = useState(12);\r\n    let [score, setScore] = useState(0);\r\n    let [level, setLevel] = useState('easy');\r\n    let [firstTile, setFirstTile] = useState('');\r\n  \r\n    const [disabled, setDisabled] = useState(false);\r\n\r\n    const showTile = (e) => {\r\n        const target = e.target.style;\r\n        target.backgroundColor = `rgb(${230 - e.target.id*3}, ${230 - e.target.id*3}, ${230 - e.target.id*3})`;\r\n        target.borderColor = 'magenta';\r\n        target.color = \"black\";\r\n        setTimeout(() => {\r\n          target.borderColor = 'rgb(20, 100, 0)';\r\n          target.backgroundColor = 'rgb(20, 100, 0)';\r\n          target.color = \"rgb(20, 100, 0)\";\r\n        }, 1500);\r\n    \r\n    \r\n        if(!firstTile){\r\n          return setFirstTile(e.target);\r\n        }\r\n    \r\n        setDisabled(true);\r\n        setTimeout(() => {\r\n          setDisabled(false);\r\n        }, 1500);\r\n    \r\n    \r\n          if(firstTile.id === e.target.id && (firstTile.offsetLeft !== e.target.offsetLeft || firstTile.offsetTop !== e.target.offsetTop )){\r\n            setTimeout(() => {\r\n              setScore(score + 1);\r\n              firstTile.style.opacity = \"0\";\r\n              e.target.style.opacity = \"0\";\r\n              setFirstTile('');\r\n          }, 500);\r\n          } else {\r\n            setFirstTile('');\r\n          }\r\n      }\r\n    \r\n      useEffect(() => {\r\n        let numbers = [];\r\n        for(let i = 0; i < tilesAmount / 2; i++){\r\n          numbers.push(i);\r\n        }\r\n        let cloneNumbers = [...numbers];\r\n        let allNumbers = numbers.concat(cloneNumbers);\r\n        const shuffle = [...allNumbers].sort(() => Math.random() - 0.5);\r\n        setTiles(shuffle);\r\n      }, [tilesAmount])\r\n    \r\n\r\n    return {\r\n            setLevel,\r\n            setScore,\r\n            setTilesAmount,\r\n            tilesAmount,\r\n            score,\r\n            disabled,\r\n            showTile,\r\n            level,\r\n            tiles\r\n        };\r\n};\r\n\r\nexport default useMemory;"]},"metadata":{},"sourceType":"module"}